using Amazon.AspNetCore.Identity.Cognito;
using Amazon.CognitoIdentityProvider.Model;
using Amazon.CognitoIdentityProvider.Model.Internal.MarshallTransformations;
using Amazon.Extensions.CognitoAuthentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using WebAdvert.Web.Models.Accounts;

namespace WebAdvert.Web.Controllers.Accounts
{
    public class Accounts : Controller
    {
        //Here its better to use an interface for the dependency injection
        //But we arent going to use that just to keep it simple
        private readonly SignInManager<CognitoUser> _signInManager;
        private readonly UserManager<CognitoUser> _userManager;
        private readonly CognitoUserPool _pool;

        public Accounts(SignInManager<CognitoUser> signInManager,
            UserManager<CognitoUser> userManager,
            CognitoUserPool pool)
        {
            _signInManager = signInManager;
            _userManager = userManager;
            _pool = pool;
        }
        public async Task<IActionResult> Signup()
        {
            var model = new SignupModel();
            return View(model);
        }
        [HttpPost]
        public async Task<IActionResult> Signup(SignupModel model)
        {
            //Here we should call the service
            //We keep the logic here just to learn how to use Cognito
            if (ModelState.IsValid)
            {
                var user = _pool.GetUser(model.Email);
                if (user.Status != null)
                {
                    ModelState.AddModelError("UserExist",
                        "User with this email already exist");
                    return View(model);
                }
                //If you dont pass the password, you still can generate a new user
                //However password will be autogenerated as a temporary password and will need to be changed in the first login
                //You can use the signup page of Cognito
                //Here will we provided the user password and the user only need to confirm the email adresss
                var createdUser = await _userManager.CreateAsync(user, model.Password).ConfigureAwait(false);
                if (createdUser.Succeeded)
                {
                    return RedirectToAction("Confirm");
                }
            }
            return View(model);
        }
        [AllowAnonymous]
        public async Task<IActionResult> Confirm()
        {
            var model = new ConfirmModel();
            return View(model);
        }
        [HttpPost]
        public async Task<IActionResult> Confirm(ConfirmModel model)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.FindByEmailAsync(model.Email).ConfigureAwait(false);
                if (user == null)
                {
                    ModelState.AddModelError("NotFound", "A user with the given email addres was not found");
                    return View(model);
                }
                //Retrieve token
                var result = await ((CognitoUserManager<CognitoUser>)_userManager)
                    .ConfirmSignUpAsync(user, model.Code, true).ConfigureAwait(false);
                if (result.Succeeded) return RedirectToAction("Index", "Home");

                foreach (var item in result.Errors) ModelState.AddModelError(item.Code, item.Description);

                return View(model);
            }
            return View(model);
        }
        [HttpGet]
        public IActionResult Login(LoginModel model)
        {
            return View(model);
        }
        [HttpPost]
        [ActionName("Login")]
        public async Task<IActionResult> LoginPost(LoginModel model)
        {
            if (ModelState.IsValid)
            {
                var result = await _signInManager.PasswordSignInAsync(model.Email,
                    model.Password, model.RememberMe, false).ConfigureAwait(false);

                if (result.Succeeded)
                {
                    return RedirectToAction("Index", "Home");
                }
                ModelState.AddModelError("LoginError", "Email and password do not match");
            }

            return View("Login", model);
        }
        [AllowAnonymous]
        public IActionResult RecoverPassword()
        {
            return View("RecoverPassword");
        }
        [HttpPost]
        [ActionName("RecoverPassword")]
        public async Task<IActionResult> RecoverPassword(LoginModel user)
        {
            CognitoUser cogUser = await _userManager.FindByEmailAsync(user.Email).ConfigureAwait(false);
            if (cogUser == null)
            {
                return BadRequest($"User with {user.Email} doesnt exist");
            }
            var IsEmailConfirmed = await _userManager.IsEmailConfirmedAsync(cogUser);
            if (IsEmailConfirmed)
            {
                await cogUser.ForgotPasswordAsync();
                return View("ChangePassword");
            }
            return BadRequest("Email is not confirmed yet");
            //var result = await _userManager.ResetPasswordAsync(cogUser,);
        }
        [HttpPost]
        [ActionName("ChangePassword")]
        public async Task<IActionResult> ChangePassword(ChangePasswordModel c)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.FindByEmailAsync(c.Email).ConfigureAwait(false);
                if (user == null)
                {
                    ModelState.AddModelError("NotFound", "A user with the given email address was not found");
                    return View(c);
                }
                //Retrieve token
                var result = await ((CognitoUserManager<CognitoUser>)_userManager).
                    ResetPasswordAsync(user, c.Code, c.Password).ConfigureAwait(false);
                if (result.Succeeded) return RedirectToAction("Index", "Home");
                foreach (var item in result.Errors) ModelState.AddModelError(item.Code, item.Description);
                return View(c);
            }
            return View(c);
        }
    }
}
